
# 将灰度图中像素进行聚类，使图片只保留n中像素
'''
在OpenCV中，Kmeans()函数原型如下所示：
retval, bestLabels, centers = kmeans(data, K, bestLabels, criteria, attempts, flags[, centers])
    data表示聚类数据，最好是np.float32类型的N维点集
    K表示聚类类簇数
    bestLabels 表示输出的整数数组，用于存储每个样本的聚类标签索引
    criteria表示迭代停止的模式选择，这是一个含有三个元素的元组型数。格式为（type, max_iter, epsilon）
        其中，type有如下模式：
         —–cv2.TERM_CRITERIA_EPS :精确度（误差）满足epsilon停止。
         —-cv2.TERM_CRITERIA_MAX_ITER：迭代次数超过max_iter停止。
         —-cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER，两者合体，任意一个满足结束。
    attempts表示重复试验kmeans算法的次数，算法返回产生的最佳结果的标签
    flags表示初始中心的选择，两种方法是cv2.KMEANS_PP_CENTERS ;和cv2.KMEANS_RANDOM_CENTERS
    centers表示集群中心的输出矩阵，每个集群中心为一行数据
	
	返回值：
	retval作为聚类质量的一个量化指标，bestLabels用于了解每个数据点的分类归属，而centers则展示了各个簇的中心位置。
	bestLabels：这是一个数组，包含了与输入数据集中的 每个数据点对应的簇标签（或索引） 。
	数组中的每个元素表示该数据点被分配到的簇的ID。例如，如果labels[i] = 0，则表示第i个数据点被分到了第一个簇。
	通过这些标签，你可以知道每个数据点属于哪一个聚类。
	retval, bestLabels, centers = kmeans(data, 4, None, criteria, 10, flags)
	调用cv2.kmeans()函数时，参数None的确是指定OpenCV自动为聚类过程选择初始质心。当您不提供具体的初始质心值，而是传递None时，
    函数会依据所选的初始化方法（通过flags参数指定，如cv2.KMEANS_RANDOM_CENTERS）来自动生成初始质心，然后开始迭代聚类过程，寻找最优的聚类划分。
'''

import cv2 
import numpy as np
import matplotlib.pyplot as plt

# 读取图片灰度图
img = cv2.imread(r'E:\image\lenna.png', 0)
print(img.shape)


# 获取图片高宽
h, w = img.shape(:)


# 二维数组转一维 转浮点类型
data = img.reshape((h*w,1))
# data = img.reshape((-1,1))
data = np.float32(data)

# 聚类停止条件 
criteria = (cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)

# 初始中心选择 随机
flags = cv2.KMEANS_RANDOM_CENTERS

# kmeans 聚类 
retval, bestLabels, centers = kmeans(data, 4, None, criteria, 10, flags)

# 一维数组转二维数组
dst = bestLabels.reshape((h, w))

# 可以正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei'] 


# 显示图像
plt.subplot(1,2,1) 
plt.title('原图片')
plt.imshow(img,'gray')

plt.subplot(1,2,2)
plt.title('聚类图片')
plt.imshow(dst,'gray')

plt.xticks([]), plt.yticks([])
# plt.axis()

plt.show()

'''
titles = ['原图片', '聚类图片']
imgs = [img, dst]
for i in range(2)
	plt.subplot(1,2,i+1),plt.title(titles[i])
	plt.imshow(imgs[i],'gray')
	plt.xticks([]), plt.yticks([])
plt.show()

'''
