import numpy as np


def WarpPerspectiveMatrix(src, dst):
    # 检查shape相同 且至少有4组点
    assert src.shape[0] == dst.shape[0] and src.shape[0] >= 4
    nums = src.shape[0]  # 4 原图有4个点的坐标
    ''' 
    透视变换矩阵：
              A(src)          *             warpMatrix  =    B(dst)  
               8x8            *                8x1      =     8x1
    
    x0  y0  1  0  0  0  -x0X'0  -y0X'0         a11            X'0       src中的第一个点[10. 457.] => dst中的第一个点[46. 920.]
    0   0   0  x0 y0 1  -x0Y'0  -y0Y'0         a12            Y'0       一组点可确定 A、B中的2行
    
    x1  y1  1  0  0  0  -x1X'1  -y1X'1         a13            X'1       同理可带入下面循环可确定2行
    0   0   0  x1 y1 1  -x1Y'1  -y1Y'1         a21            Y'1       4组点可确定 A、B矩阵
    
    x2  y2  1  0  0  0  -x2X'2  -y2X'2         a22            X'2
    0   0   0  x2 y2 1  -x2Y'2  -y2Y'2         a23            Y'2
    
    x3  y3  1  0  0  0  -x3X'3  -y3X'3         a31            X'3
    0   0   0  x3 y3 1  -x3Y'3  -y3Y'3         a32            Y'3
    '''
    A = np.zeros((2 * nums, 8))  # 8X8矩阵  A矩阵   
    B = np.zeros((2 * nums, 1))  # 8X1矩阵  透视变换矩阵
    for i in range(0, nums):  # i = 0,1,2,3
        # 从数组 src 中提取第 i 行的数据，然后将其赋值给变量 A_i。这是一种常见的操作，用于获取数组中特定行的数据。
        A_i = src[i, :]    # A_i [10. 457.]  src中的第一个点
        B_i = dst[i, :]    # B_i [46. 920.]  dst中的第一个点
        '''
        A矩阵第1行：
           A[0,:]   =    x0       y0   1  0  0  0      -x0X'0            -y0X'0 
        '''
        # [ 1.00e+01  4.57e+02  1.00e+00  0.00e+00  0.00e+00  0.00e+00 -1.00e+02, -4.57e+03]
        A[2 * i, :] = [A_i[0], A_i[1], 1, 0, 0, 0, -A_i[0] * B_i[0], -A_i[1] * B_i[0]]
        '''
        B矩阵第1行：
          B[0]   = X'0
        '''
        # 将透视变换矩阵 B 的第 2*i 个元素赋值为 B_i 的第一个元素。
        B[2 * i] = B_i[0]  # 46.0
        '''
             0  0  0  x0  y0  1  -x0Y'0  -y0Y'0 
        '''

        '''
         A矩阵第2行：
            A[1,:]       = 0  0  0    x0      y0    1        -x0Y'0            -y0Y'0
        '''
        # [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+01  4.57000e+02,  1.00000e+00 -4.57000e+03 -2.08849e+05]
        A[2 * i + 1, :] = [0, 0, 0, A_i[0], A_i[1], 1, -A_i[0] * B_i[1], -A_i[1] * B_i[1]]
        '''
        B矩阵第2行：
          B[1]   = X'1
        '''
        # 将透视变换矩阵 B 的第 2*i+1 个元素赋值为 B_i 的第二个元素。
        B[2 * i + 1] = B_i[1]  # 920

    # NumPy 中用于将数组转换为矩阵的函数
    A = np.mat(A)
    print('A为\n', A)
    '''
     [[ 1.00000e+01  4.57000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.00000e+02 -4.57000e+03], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+01  4.57000e+02,   1.00000e+00 -4.57000e+03 -2.08849e+05], 
      [ 3.95000e+02  2.91000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.56025e+05 -1.14945e+05],
      [ 0.00000e+00  0.00000e+00  0.00000e+00  3.95000e+02  2.91000e+02,   1.00000e+00 -1.14945e+05 -8.46810e+04], 
      [ 6.24000e+02  2.91000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -3.89376e+05 -1.81584e+05], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  6.24000e+02  2.91000e+02,   1.00000e+00 -1.81584e+05 -8.46810e+04],
      [ 1.00000e+03  4.57000e+02  1.00000e+00  0.00000e+00  0.00000e+00,   0.00000e+00 -1.00000e+06 -4.57000e+05], 
      [ 0.00000e+00  0.00000e+00  0.00000e+00  1.00000e+03  4.57000e+02,   1.00000e+00 -4.57000e+05 -2.08849e+05]]
    '''
    # 用A.I求出A的逆矩阵，然后与B相乘，求出warpMatrix
    '''
                   A * warpMatrix  =  B 
            =》    warpMatrix =  A.I * B  
    '''
    warpMatrix = A.I * B
    '''
    求出 warpMatrix: a_11、a_12、a_13、a_21、a_22、a_23、a_31、a_32
    matrix([[-5.01338334e-01],
            [-1.35357643e+00],
            [ 5.82386716e+02],
            [ 1.06858966e-15],
            [-4.84035391e+00],
            [ 1.38781980e+03],
            [ 4.33680869e-19],
            [-4.14856327e-03]])
    '''
    # 结果的后处理
    warpMatrix = np.array(warpMatrix).T[0]
    '''
    令a33=1，简化计算过程，最终需要加入a33
    np.array() 函数将矩阵 warpMatrix 转换为一个一维数组，然后使用 np.transpose() 函数对其进行转置，最后使用索引 0 来获取转置后的第一个元素。
    np.array(warpMatrix):      [[-5.01338334e-01], [-1.35357643e+00], [ 5.82386716e+02], [ 1.06858966e-15], [-4.84035391e+00], [ 1.38781980e+03], [ 4.33680869e-19], [-4.14856327e-03]]
    np.array(warpMatrix).T[0]:  [-5.01338334e-01    -1.35357643e+00     5.82386716e+02     1.06858966e-15,   -4.84035391e+00     1.38781980e+03     4.33680869e-19    -4.14856327e-03]
    '''
    warpMatrix = np.insert(warpMatrix, warpMatrix.shape[0], values=1.0, axis=0)  # 插入a_33 = 1
    '''                                                          
    [-5.01338334e-01 -1.35357643e+00  5.82386716e+02  1.06858966e-15,   
     -4.84035391e+00  1.38781980e+03  4.33680869e-19 -4.14856327e-03,  1.00000000e+00] 
                                                                         a_33 = 1
    '''
    warpMatrix = warpMatrix.reshape((3, 3))
    '''
    [[-5.01338334e-01 -1.35357643e+00  5.82386716e+02], 
     [ 1.06858966e-15 -4.84035391e+00  1.38781980e+03],
      [ 4.33680869e-19 -4.14856327e-03  1.00000000e+00]]
    '''
    return warpMatrix


if __name__ == '__main__':
    print('warpMatrix')
    src = [[10.0, 457.0], [395.0, 291.0], [624.0, 291.0], [1000.0,457.0]]
    src = np.array(src)  # 原图4X2
    '''
           src:
            [[  10.  457.],
             [ 395.  291.],
             [ 624.  291.],
             [1000.  457.]]
    '''
    dst = [[46.0, 920.0], [46.0, 100.0], [600.0, 100.0], [600.0, 920.0]]
    dst = np.array(dst)  # 目标图4X2
    '''
    dst:
         [[ 46. 920.], 
          [ 46. 100.], 
          [600. 100.], 
          [600. 920.]]

    '''
    warpMatrix = WarpPerspectiveMatrix(src, dst)
    print(warpMatrix)
