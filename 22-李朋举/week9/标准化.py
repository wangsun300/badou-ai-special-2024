import numpy as np
import matplotlib.pyplot as plt

'''
标准化（Normalization）
    原因：由于进行分类器或模型的建立与训练时，输入的数据范围可能比较大，同时样本中各数据可能量纲不一致，这样的数据容易对模型训练或分类器的构建结果产生影响，
         因此需要对其进行标准化处理，去除数据的单位限制，将其转化为无量纲的纯数值，便于不同单位或量级的指标能够进行比较和加权。
    1. 其中最典型的就是数据的归一化处理，即将数据统一映射到[0,1]区间上:
                y = (x - min) / (max - min)
    2. 标准化（零均值归一化zero-mean normalization）： 经过处理后的数据均值为0，标准差为1（正态分布）, 其中μ是样本的均值， σ是样本的标准差
                y = (x − μ) / σ
'''
# 归一化的两种方式
def Normalization1(x):
    """归一化（0~1）"""
    '''x_=(x−x_min)/(x_max−x_min)'''
    return [(float(i) - min(x)) / float(max(x) - min(x)) for i in x]


def Normalization2(x):
    """归一化（-1~1）"""
    '''x_=(x−x_mean)/(x_max−x_min)'''
    return [(float(i) - np.mean(x)) / (max(x) - min(x)) for i in x]


# 标准化
def z_score(x):
    """y=(x−μ)/σ"""
    # 均值μ
    x_mean = np.mean(x)
    # 标准差σ ： 通过计算每个元素与均值的差的平方的平均值来计算
    s2 = sum([(i - np.mean(x)) * (i - np.mean(x)) for i in x]) / len(x)
    # 零均值归一化 ： y =(x−μ)/σ  其中每个元素都是原始数据集中的元素 `i` 减去均值 `x_mean`，然后除以标准差 `s2`
    return [(i - x_mean) / s2 for i in x]



l = [-10, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,
     11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 30]
l1 = []
# for i in l:
#     i+=2
#     l1.append(i)
# print(l1)
cs = []
for i in l:
    c = l.count(i)  # count() 方法来计算元素 i 在列表 l 中出现的次数，并将结果赋值给变量 c
    cs.append(c)
print(cs)


# n = Normalization1(l)
'''
n: 将 l 归一化（0~1） 
    [0.0, 0.375, 0.375, 0.4, 0.4, 0.4, 0.425, 0.425, 0.425, 0.425, 0.45, 0.45, 0.45, 0.45, 0.45, 0.475, 0.475, 0.475, 0.475, 0.475, 0.475, 0.5, 0.5, 0.5, 0.5, 0.5, 
     0.5, 0.5, 0.525, 0.525, 0.525, 0.525, 0.525, 0.525, 0.55, 0.55, 0.55, 0.55, 0.55, 0.575, 0.575, 0.575, 0.575, 0.6, 0.6, 0.6, 0.625, 0.625, 1.0]
'''

n = Normalization2(l)
'''
 n: 将 l 归一化（-1~1） 
    [-0.5, -0.125, -0.125, -0.1, -0.1, -0.1, -0.075, -0.075, -0.075, -0.075, -0.05, -0.05, -0.05, -0.05, -0.05, -0.025, -0.025, -0.025, -0.025, -0.025, -0.025,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.05, 0.05, 0.05, 0.05, 0.05, 0.075, 0.075, 0.075, 0.075, 0.1, 0.1, 0.1, 0.125, 0.125, 0.5]
'''

z = z_score(l)
'''
 Z: 将 l 标准化  零均值归一化 ： y =(x−μ)/σ
    [-0.875, -0.21875, -0.21875, -0.175, -0.175, -0.175, -0.13125, -0.13125, -0.13125, -0.13125, -0.0875, -0.0875, -0.0875, -0.0875, -0.0875, -0.04375, -0.04375, -0.04375, 
     -0.04375, -0.04375, -0.04375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04375, 0.04375, 0.04375, 0.04375, 0.04375, 0.04375, 0.0875, 0.0875, 0.0875, 0.0875, 0.0875, 0.13125, 0.13125, 0.13125, 0.13125, 0.175, 0.175, 0.175, 0.21875, 0.21875, 0.875]
'''


print(n)
print(z)
'''
蓝线为原始数据，橙线为z
plt.plot(l, cs)：在一个新的图形窗口中绘制一个折线图，其中 x 轴上的数据点来自 `l`，y 轴上的数据点来自 `cs`
    使用 `matplotlib` 库来绘制一个折线图。它使用了两个参数：`l` 和 `cs`。
`   l` 是一个列表，它包含了 x 轴上的数据点。在这个例子中，`l` 可能是一个数字列表，表示 x 轴上的坐标。
    cs` 也是一个列表，它包含了 y 轴上的数据点。在这个例子中，`cs` 可能是一个数字列表，表示 y 轴上的坐标。
'''
plt.plot(l, cs)
plt.plot(z, cs)
plt.show()
