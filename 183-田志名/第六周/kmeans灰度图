import cv2
import numpy as np
import matplotlib.pyplot as plt
img=cv2.imread("lenna.png",0) #0代表将图像调整为单通道的灰度图像
rows,cols=img.shape
data=img.reshape((rows*cols,1))
data=np.float32(data)            #为了后续计算，将uint8转成flloat32

'''
在OpenCV中，Kmeans()函数原型如下所示：
retval, bestLabels, centers = kmeans(data, K, bestLabels, criteria, attempts, flags[, centers])
    data表示聚类数据，最好是np.float32类型的N维点集
    K表示聚类类簇数
    bestLabels表示输出的整数数组，用于存储每个样本的聚类标签索引
    criteria表示迭代停止的模式选择，这是一个含有三个元素的元组型数。格式为（type, max_iter, epsilon）
        其中，type有如下模式：
         —–cv2.TERM_CRITERIA_EPS :精确度（误差）满足epsilon停止。
         —-cv2.TERM_CRITERIA_MAX_ITER：迭代次数超过max_iter停止。(cv2.TERM_CRITERIA_MAX_ITER,10)
         —-cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER，两者合体，任意一个满足结束。(cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER,10,1.0)
    attempts表示重复试验kmeans算法的次数，算法返回产生的最佳结果的标签
    flags表示初始中心的选择，两种方法是cv2.KMEANS_PP_CENTERS ;和cv2.KMEANS_RANDOM_CENTERS
    centers表示集群中心的输出矩阵，每个集群中心为一行数据
'''

#单个维度,因为只有灰度这一个信息，此时距离就是两个灰度值之间的差值
compactness, labels, centers = cv2.kmeans(data, 4, None, (cv2.TERM_CRITERIA_EPS+cv2.TERM_CRITERIA_MAX_ITER,10,1.0), 10, cv2.KMEANS_PP_CENTERS)
result=labels.reshape((img.shape[0]),img.shape[1])    #labels的结果是标签,centers是中心点
print(centers)
#绘图
plt.rcParams['font.sans-serif']=['SimHei']    #用来正常显示中文标签
plt.subplot(1,2,1)
plt.title("原始图像")
plt.imshow(img,"gray")
plt.subplot(1,2,2)
plt.title("聚类图像")
plt.imshow(result,"gray")
plt.show()
