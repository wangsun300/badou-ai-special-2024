import numpy as np
import cv2

def warpPerspectiveMatrix(src,dst):
    assert src.shape[0] == dst.shape[0] and src.shape[0] >=4

    num = src.shape[0]
    A = np.zeros((2*num,8))
    B = np.zeros((2*num,1))
    for i in range(0,num):
        A_i = src[i,:]
        B_i = dst[i,:]
        A[2 * i, :] = [A_i[0], A_i[1], 1, 0, 0, 0,
                       -A_i[0] * B_i[0], -A_i[1] * B_i[0]]
        B[2 * i] = B_i[0]

        A[2 * i + 1, :] = [0, 0, 0, A_i[0], A_i[1], 1,
                           -A_i[0] * B_i[1], -A_i[1] * B_i[1]]
        B[2 * i + 1] = B_i[1]
    A = np.mat(A)
    warpMatrix = A.I * B
    warpMatrix = np.array(warpMatrix) .T[0]
    warpMatrix = np.insert(warpMatrix,warpMatrix.shape[0],values=1.0,axis=0)
    warpMatrix = warpMatrix .reshape((3,3))
    return warpMatrix

if __name__ =="__main__":
    img = cv2.imread('lenna.png')
    result = img.copy()
    src = [[10.0, 457.0], [395.0, 291.0], [65.0, 291.0], [362, 457.0]]
    src = np.array(src)

    dst = [[46.0, 52.0], [46.0, 100.0], [89.0, 100.0], [387.0, 254.0]]
    dst = np.array(dst)

    warpMatrixl = warpPerspectiveMatrix(src,dst)
    result = cv2.warpPerspective(img, warpMatrixl, (600, 600))
    cv2.imshow('result',result)
    cv2.waitKey(0)
