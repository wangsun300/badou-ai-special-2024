import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

x_data = np.linspace(-0.5,0.5,200)[:,np.newaxis]
noise = np.random.normal(0,0.02,x_data.shape)
y_data = np.square(x_data)+noise

x = tf.placeholder(tf.float32,[None,1])
y = tf.placeholder(tf.float32,[None,1])

w_1 = tf.Variable(tf.random_normal([1,10]))
b_1 = tf.Variable(tf.zeros([1,10]))
wxb_1 = tf.matmul(x,w_1)+b_1
l_1 = tf.nn.tanh(wxb_1)

w_2 = tf.Variable(tf.random_normal([10,1]))
b_2 = tf.Variable(tf.zeros([1,1]))
wxb_2 = tf.matmul(l_1,w_2)+b_2
prediction = tf.nn.tanh(wxb_2)

loss = tf.reduce_mean(tf.square(y - prediction))
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(500):
        sess.run(train_step,feed_dict={x:x_data,y:y_data})
    prediction_values = sess.run(prediction,feed_dict={x:x_data})
    plt.figure()
    plt.scatter(x_data,y_data)
    plt.plot(x_data,prediction_values,'r-',lw=5)
    plt.show()
